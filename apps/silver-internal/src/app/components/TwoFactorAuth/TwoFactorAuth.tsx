import { FC } from "react";
import QRCode from "react-qr-code";
import { Link, useLocation } from "react-router-dom";

import { Button, useToast } from "@emrgo-frontend/shared-ui";
import { useMutation } from "@tanstack/react-query";
import { Formik } from "formik";
import * as Yup from "yup";

import routes from "../../constants/routes";
import { useUserStore } from "../../pages/Authentication/store";
import { useMFAModal } from "../../pages/Primaries/store/store";
import { enableMFA, verifyMFA } from "../../services";
import { Heading, OneCol, SubHeading } from "../Form";
import { SixDigitCodeInput } from "../SixDigitCodeInput";
import { MFATYPE } from "../TwoFAstepper/TwoFAstepper.types";
import * as Styles from "./TwoFactorAuth.styles";
import { ITwoFactorAuthProps } from "./TwoFactorAuth.types";

export const TwoFactorAuth: FC<ITwoFactorAuthProps> = ({ position, secret, mode, otpauth_url }) => {
  const { modalActions } = useMFAModal();
  const { setVerifyMFA } = useUserStore();
  const { showErrorToast } = useToast();
  const location = useLocation();
  const postRegistration = `${location}`.search("create-password");
  const { mutate: doVerifyMFA } = useMutation(verifyMFA, {
    onSuccess: () => {
      modalActions.setModalOpen(false);
      setVerifyMFA(false);
    },
    onError: () => {
      showErrorToast("Error while verifing mfa code");
    }
  });
  const { mutate: doEnableMFA } = useMutation(enableMFA, {
    onSuccess: () => {
      modalActions.setModalOpen(false);
      if (postRegistration) window.location.assign(routes.auth.login);
    }, onError: () => {
      showErrorToast("Error while trying to enable mfa");
    }
  });
  return (
    <Styles.TwoFactorAuth position={position}>
      <Formik
        validateOnMount={true}
        initialValues={{ otp: "" }}
        onSubmit={(values, formikHelpers) => {
          console.log(values);
          if (mode === undefined) return;
          if (mode === MFATYPE.enable) doEnableMFA(values.otp);
          else doVerifyMFA(values.otp);
        }}
        validationSchema={Yup.object().shape({
          otp: Yup.string().required("Required")
            .min(6, "Enter 6 digits")
        })
        }
      >

        {({ values, setFieldValue, errors, handleSubmit, isValid }) => (
          <form onSubmit={handleSubmit}>
            <Styles.MainWrapper isVisible={mode === 1}>
              <Styles.LeftColumn isVisible={mode === 1}>
                <Heading align={"center"}>Setup Two Factor Authentication (MFA)</Heading>
                <SubHeading align={"center"}>
                  Scan the following QR code with a two-factor authentication app on your phone.
                </SubHeading>
                <div style={{ height: "224", margin: "0 auto", maxWidth: 224 }}>
                  <QRCode
                    size={256}
                    style={{ height: "auto", maxWidth: "100%", width: "100%" }}
                    value={otpauth_url ?? ""}
                    viewBox={`0 0 256 256`}
                  />
                </div>
                <SubHeading align={"center"}>
                  Download on of the supported applications through your mobile phoneâ€™s App Store: Google
                  Authenticator, Microsoft Authenticator, Authy or any other MFA supported app that you
                  currently use
                </SubHeading>
              </Styles.LeftColumn>
              <Styles.RightColumn>
                <Heading align={"center"}>Enter Security Code</Heading>
                <SubHeading align={"center"}>
                  Enter the security code generated by your two-factor authentication app. You will be
                  provided a new security code every 30 seconds.
                </SubHeading>
                <OneCol>
                  <SixDigitCodeInput
                    value={values.otp}
                    onChange={(value) => {
                      setFieldValue("otp", value);
                    }}
                  />
                </OneCol>
                <OneCol>
                  <Button
                    size="large"
                    type={"submit"}
                    disabled={!isValid}
                  >
                    Setup
                  </Button>
                </OneCol>
                <Styles.Spacer />
                <Styles.HelpListItem>
                  <Link to={routes.dash.administration.home}>Raise support ticket</Link>
                </Styles.HelpListItem>
              </Styles.RightColumn>
            </Styles.MainWrapper>
          </form>
        )}

      </Formik>
    </Styles.TwoFactorAuth>
  );
};
